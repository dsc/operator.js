/*
 *      operator.js -- 0.1.1
 *      (c) 2012 David Schoonover <dsc@less.ly>
 *      operator.js is freely distributable under the MIT license.
 *      
 *      For all details and documentation:
 *      https://github.com/dsc/operator.js
 */

VERSION = '0.1.1'

DASH_PATTERN = /-/g
STRIP_PAT = /(^\s*|\s*$)/g
FALSEY = /^\s*(?:no|off|false)\s*$/i


# Module systems magic dance
op = {}


# CommonJS and Node
if exports?
    op = exports
# Fallback to exposing a global
else if window?
    window.operator = op
# AMD / require.js
if typeof define is 'function' and define.amd
    define 'operator', [], (require, exports, module) -> module.exports = op


op import {
    VERSION,
    
    ### Value Operators
    
    I       : (x) -> x
    K       : (k) -> -> k
    nop     : ->
    noop    : op.noop
    kThis   : -> this
    kObject : -> {}
    kArray  : -> []
    val     : (def,o) -> o ? def
    
    ### Test Operators
    
    ok      : (o)     -> o?
    notOk   : (o)     -> o!?
    isK     : (k)     -> (v) -> v is k
    
    ### Arity Operators
    second  : (_,a)   -> a
    nth     : (n) ->
        switch n
            case 0 then op.first
            case 1 then op.second
            default     -> arguments[n]
    
    # reverse the order of the first two args
    flip    : (fn) ->
        (a, b) ->
            arguments[0] = b
            arguments[1] = a
            fn.apply this, arguments
    
    # only pass n args
    aritize : (fn, cxt, n) ->
        [n, cxt] = [cxt, null] if arguments.length < 3
        -> fn.apply cxt ? this, [].slice.call(arguments, 0, n)
    
    # only pass the first argument
    it      : (fn, cxt) ->
        -> fn.call cxt ? this, it
    
    
    
    ### reduce-ordered values & accessors
    khas      : (k,o)       ->  k in o
    kget      : (k,o)       ->  o[k]
    defkget   : (def,k,o)   ->  if k in o then o[k] else def
    thisget   : (k)         ->  this[k]
    vkset     : (o,v,k)     ->  o[k] = v if o and k?; o
    
    ### curry-ordered values & accessors
    has       : (o,k)       ->  k in o
    get       : (o,k)       ->  o[k]
    getdef    : (o,k,def)   ->  if k in o then o[k] else def
    kvset     : (o,k,v)     ->  o[k] = v if o and k?; o
    thiskvset : (k,v)       ->  @[k] = v if k?; this
    
    prop      : (k) -> (o) -> o[k]
    method    : (name, ...args) ->
        (obj, ..._args) ->
            obj[name] ...args.concat(_args) if obj?[name]
    
    ### type coercion (w/ limited parameters for mapping)
    parseBool   : (s) ->
        i = parseInt(s or 0)
        !! if isNaN(i) then not FALSEY.test(s) else i
    
    toBool      : op.parseBool
    toInt       : (v) -> parseInt v
    toFloat     : (v) -> parseFloat v
    toStr       : (v) -> String v
    toRegExp    : (v) -> new RegExp v
    
    toObject : (v) ->
        if typeof v is 'string' and op.strip(v)
            JSON.parse v
        else
            Object v
    
    toDate : (v) ->
        return v if v!? or v instanceof Date
        return new Date v if typeof v is 'number'
        return new Date String(v).replace DASH_PATTERN, '/'
    
    
    ### Inequality Operators
    cmp       : (x,y)  ->  if x < y then -1 else (if x > y then 1 else 0)
    eq        : (x,y)  ->  x == y
    ne        : (x,y)  ->  x != y
    gt        : (x,y)  ->  x  > y
    ge        : (x,y)  ->  x >= y
    lt        : (x,y)  ->  x  < y
    le        : (x,y)  ->  x <= y
    
    ### Mathematical Operators
    add       : (x,y)  ->  x  + y
    sub       : (x,y)  ->  x  - y
    mul       : (x,y)  ->  x  * y
    div       : (x,y)  ->  x  / y
    flrdiv    : (x,y)  ->  Math.floor(x / y)
    mod       : (x,y)  ->  x  % y
    neg       : (x)    ->  -x
    log2      : (n)    -> Math.log n / Math.LN2
    
    
    ### Logical Operators
    is        : (x,y)  ->  x is y
    isnt      : (x,y)  ->  x is not y
    and       : (x,y)  ->  x and y
    or        : (x,y)  ->  x or y
    not       : (x)    ->  not x
    
    ### Bitwise Operators
    bitnot    : (x)    ->  ~x
    bitand    : (x,y)  ->  x  & y
    bitor     : (x,y)  ->  x  | y
    bitxor    : (x,y)  ->  x  ^ y
    lshift    : (x,y)  ->  x << y
    rshift    : (x,y)  ->  x >> y
    # zrshift   : (x,y)     ->  x >>> y
    
    ### Binary Operators
    
    # Binary representation of the number.
    bin : (n) ->
        do
            s = (if n % 2 then '1' else '0') + (s or '')
            n >>= 1
        while n
        s
    
    # Number of bits needed to represent the absolute value of n.
    binlen : (n) ->
        op.bin Math.abs(n) .length
    
    # Returns a run of 1s of size n.
    mask : (n) ->
        (1 << n) - 1
    
    # strings
    chr    : -> String.fromCharCode it
    ord    : -> String(it).charCodeAt 0
    encode : -> it and $ "<div>#it</div>" .html().replace /"/g, '&quot;'
    decode : -> it and $ "<div>#it</div>" .text()
    strip  : (s) ->
        if s then s.replace STRIP_PAT, '' else s
    
}

